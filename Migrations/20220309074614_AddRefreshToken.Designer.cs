// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelTogether2.Models;

namespace TravelTogether2.Migrations
{
    [DbContext(typeof(TourGuide_v2Context))]
    [Migration("20220309074614_AddRefreshToken")]
    partial class AddRefreshToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelTogether2.Models.Account", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("TravelTogether2.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Longtitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TravelAgencyId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("TravelAgencyId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("TravelTogether2.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TravelTogether2.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TravelTogether2.Models.Follow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("TravelTogether2.Models.HasLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TourGuideId");

                    b.ToTable("HasLanguage");
                });

            modelBuilder.Entity("TravelTogether2.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Language1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Language");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("TravelTogether2.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("TravelTogether2.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Longtitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("TravelTogether2.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExpriedAt")
                        .HasColumnType("int");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("IssueAt")
                        .HasColumnType("int");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("TravelTogether2.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TravelTogether2.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("QuatityTrip")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TourGuideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsExtra")
                        .HasColumnType("bit");

                    b.Property<bool?>("MainActivityId")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TourId");

                    b.ToTable("TourActivity");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SocialNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("TravelAgencyId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("TravelAgencyId");

                    b.ToTable("TourGuide");
                });

            modelBuilder.Entity("TravelTogether2.Models.TravelAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("TravelAgency");
                });

            modelBuilder.Entity("TravelTogether2.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("date");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("FeedBackCore")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("TravelTogether2.Models.TripActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TourActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourActivityId");

                    b.HasIndex("TripId");

                    b.ToTable("TripActivity");
                });

            modelBuilder.Entity("TravelTogether2.Models.Account", b =>
                {
                    b.HasOne("TravelTogether2.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TravelTogether2.Models.Area", b =>
                {
                    b.HasOne("TravelTogether2.Models.TravelAgency", "TravelAgency")
                        .WithMany("Areas")
                        .HasForeignKey("TravelAgencyId")
                        .HasConstraintName("FK_Area_TravelAgency")
                        .IsRequired();

                    b.Navigation("TravelAgency");
                });

            modelBuilder.Entity("TravelTogether2.Models.Follow", b =>
                {
                    b.HasOne("TravelTogether2.Models.Customer", "Customer")
                        .WithMany("Follows")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Follow_Customer");

                    b.HasOne("TravelTogether2.Models.TourGuide", "TourGuide")
                        .WithMany("Follows")
                        .HasForeignKey("TourGuideId")
                        .HasConstraintName("FK_Follow_TourGuide");

                    b.Navigation("Customer");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TravelTogether2.Models.HasLanguage", b =>
                {
                    b.HasOne("TravelTogether2.Models.Language", "Language")
                        .WithMany("HasLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_HasLanguage_Language");

                    b.HasOne("TravelTogether2.Models.TourGuide", "TourGuide")
                        .WithMany("HasLanguages")
                        .HasForeignKey("TourGuideId")
                        .HasConstraintName("FK_HasLanguage_TourGuide");

                    b.Navigation("Language");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TravelTogether2.Models.Payment", b =>
                {
                    b.HasOne("TravelTogether2.Models.Trip", "Trip")
                        .WithMany("Payments")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_Payment_Trip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelTogether2.Models.Place", b =>
                {
                    b.HasOne("TravelTogether2.Models.Area", "Area")
                        .WithMany("Places")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Place_Area");

                    b.HasOne("TravelTogether2.Models.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Place_Category");

                    b.Navigation("Area");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TravelTogether2.Models.RefreshToken", b =>
                {
                    b.HasOne("TravelTogether2.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("UserEmail");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TravelTogether2.Models.Tour", b =>
                {
                    b.HasOne("TravelTogether2.Models.TourGuide", "TourGuide")
                        .WithMany("Tours")
                        .HasForeignKey("TourGuideId")
                        .HasConstraintName("FK_Tour_TourGuide");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourActivity", b =>
                {
                    b.HasOne("TravelTogether2.Models.Place", "Place")
                        .WithMany("TourActivities")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_TourActivity_Place");

                    b.HasOne("TravelTogether2.Models.Tour", "Tour")
                        .WithMany("TourActivities")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_TourActivity_Tour");

                    b.Navigation("Place");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourGuide", b =>
                {
                    b.HasOne("TravelTogether2.Models.TravelAgency", "TravelAgency")
                        .WithMany("TourGuides")
                        .HasForeignKey("TravelAgencyId")
                        .HasConstraintName("FK_TourGuide_TravelAgency");

                    b.Navigation("TravelAgency");
                });

            modelBuilder.Entity("TravelTogether2.Models.Trip", b =>
                {
                    b.HasOne("TravelTogether2.Models.Customer", "Customer")
                        .WithMany("Trips")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Trip_Customer");

                    b.HasOne("TravelTogether2.Models.Tour", "Tour")
                        .WithMany("Trips")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Trip_Tour");

                    b.Navigation("Customer");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("TravelTogether2.Models.TripActivity", b =>
                {
                    b.HasOne("TravelTogether2.Models.TourActivity", "TourActivity")
                        .WithMany("TripActivities")
                        .HasForeignKey("TourActivityId")
                        .HasConstraintName("FK_TripActivity_TourActivity");

                    b.HasOne("TravelTogether2.Models.Trip", "Trip")
                        .WithMany("TripActivities")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_TripActivity_Trip");

                    b.Navigation("TourActivity");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelTogether2.Models.Area", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TravelTogether2.Models.Category", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TravelTogether2.Models.Customer", b =>
                {
                    b.Navigation("Follows");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelTogether2.Models.Language", b =>
                {
                    b.Navigation("HasLanguages");
                });

            modelBuilder.Entity("TravelTogether2.Models.Place", b =>
                {
                    b.Navigation("TourActivities");
                });

            modelBuilder.Entity("TravelTogether2.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("TravelTogether2.Models.Tour", b =>
                {
                    b.Navigation("TourActivities");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourActivity", b =>
                {
                    b.Navigation("TripActivities");
                });

            modelBuilder.Entity("TravelTogether2.Models.TourGuide", b =>
                {
                    b.Navigation("Follows");

                    b.Navigation("HasLanguages");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("TravelTogether2.Models.TravelAgency", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("TourGuides");
                });

            modelBuilder.Entity("TravelTogether2.Models.Trip", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("TripActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
